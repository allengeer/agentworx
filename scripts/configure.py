#!/usr/bin/env python3
"""
Configuration management script for Sengy.
Helps users set up and validate their configuration.
"""

import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sengy.config import get_settings, reload_settings, validate_configuration


def check_configuration():
    """Check current configuration status."""
    print("🔍 Sengy Configuration Check")
    print("=" * 40)
    
    try:
        settings = get_settings()
        
        print(f"📋 Application: {settings.app_name} v{settings.version}")
        print(f"🌍 Environment: {settings.environment}")
        print(f"🐛 Debug mode: {settings.debug}")
        
        print("\n🔑 API Keys Status:")
        print(f"  OpenAI: {'✅ Configured' if settings.openai.api_key else '❌ Missing'}")
        print(f"  Jira: {'✅ Configured' if settings.jira.api_token else '⚠️  Optional'}")
        print(f"  LangSmith: {'✅ Configured' if settings.langsmith.api_key else '⚠️  Optional'}")
        
        print(f"\n🤖 LLM Configuration:")
        print(f"  Model: {settings.openai.model}")
        print(f"  Temperature: {settings.openai.temperature}")
        print(f"  Max Tokens: {settings.openai.max_tokens}")
        
        print(f"\n⚡ Performance Settings:")
        print(f"  Rate Limit: {settings.rate_limit_requests_per_second} req/s")
        print(f"  Max Message Tokens: {settings.max_message_tokens}")
        print(f"  Recursion Limit: {settings.recursion_limit}")
        
        # Validate basic configuration
        print(f"\n✅ Basic Validation:")
        if validate_configuration(for_evaluation=False):
            print("  Core functionality: ✅ Ready")
        else:
            print("  Core functionality: ❌ Issues detected")
            
        # Validate evaluation configuration
        print(f"📊 Evaluation Validation:")
        if validate_configuration(for_evaluation=True):
            print("  Evaluation ready: ✅ All systems go")
        else:
            print("  Evaluation ready: ⚠️  Missing LangSmith key")
        
        return True
        
    except Exception as e:
        print(f"❌ Configuration error: {e}")
        return False


def setup_environment_file():
    """Help user create .env file."""
    print("🛠️  Environment File Setup")
    print("=" * 30)
    
    env_path = project_root / ".env"
    example_path = project_root / ".env.example"
    
    if env_path.exists():
        print(f"📄 .env file already exists at: {env_path}")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Keeping existing .env file")
            return
    
    if not example_path.exists():
        print(f"❌ .env.example not found at: {example_path}")
        return
        
    # Copy example to .env
    with open(example_path, 'r') as src, open(env_path, 'w') as dst:
        dst.write(src.read())
    
    print(f"✅ Created .env file at: {env_path}")
    print("📝 Please edit the .env file and add your API keys")
    print("🔑 Required: OPENAI_API_KEY")
    print("🔑 Optional: LANGSMITH_API_KEY, JIRA_API_TOKEN")


def prompt_for_keys():
    """Interactive prompt for API keys."""
    print("🔐 API Key Setup")
    print("=" * 20)
    
    env_path = project_root / ".env"
    env_vars = {}
    
    # Load existing .env if it exists
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    
    # Prompt for OpenAI key (required)
    current_openai = env_vars.get('OPENAI_API_KEY', '')
    if current_openai and not current_openai.startswith('your_'):
        print(f"🔑 OpenAI API Key: Already configured")
    else:
        openai_key = input("🔑 Enter your OpenAI API Key (required): ").strip()
        if openai_key:
            env_vars['OPENAI_API_KEY'] = openai_key
    
    # Prompt for LangSmith key (optional)
    current_langsmith = env_vars.get('LANGSMITH_API_KEY', '')
    if current_langsmith and not current_langsmith.startswith('your_'):
        print(f"📊 LangSmith API Key: Already configured")
    else:
        print("\n📊 LangSmith is used for evaluation and tracing (optional)")
        langsmith_key = input("Enter your LangSmith API Key (press Enter to skip): ").strip()
        if langsmith_key:
            env_vars['LANGSMITH_API_KEY'] = langsmith_key
    
    # Write updated .env file
    with open(env_path, 'w') as f:
        f.write("# Sengy Configuration\n")
        f.write("# Generated by configure.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"✅ Configuration saved to: {env_path}")


def main():
    """Main configuration menu."""
    while True:
        print("\n🛠️  Sengy Configuration Manager")
        print("=" * 35)
        print("1. Check current configuration")
        print("2. Create .env file from template")
        print("3. Set up API keys interactively")
        print("4. Reload configuration")
        print("5. Exit")
        
        choice = input("\nSelect an option (1-5): ").strip()
        
        if choice == '1':
            check_configuration()
        elif choice == '2':
            setup_environment_file()
        elif choice == '3':
            prompt_for_keys()
        elif choice == '4':
            print("🔄 Reloading configuration...")
            reload_settings()
            print("✅ Configuration reloaded")
        elif choice == '5':
            print("👋 Goodbye!")
            break
        else:
            print("❌ Invalid choice, please try again")


if __name__ == "__main__":
    main()